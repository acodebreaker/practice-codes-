#include <iostream>
#include<bits/stdc++.h>
using namespace std;

struct node 
{
int data;
struct node *next;
};

void deletealtnode(struct node *f)
{
struct node* s=f;
struct node* tmp;
if(f==NULL)
return ;
while(f!=NULL&&s!=NULL&&f->next!=NULL)
{
s=f->next;
f->next=s->next;
//tmp=s;
//s->next=NULL;

f=f->next;
//s=s->next;
free(s);
}
}

void append(struct node** head_ref, int new_data)
{
    /* 1. allocate node */
    struct node* new_node = (struct node*) malloc(sizeof(struct node));

    struct node *last = *head_ref;  /* used in step 5*/
 
    /* 2. put in the data  */
    new_node->data  = new_data;

    /* 3. This new node is going to be the last node, so make next of it as NULL*/
    new_node->next = NULL;

    /* 4. If the Linked List is empty, then make the new node as head */
    if (*head_ref == NULL)
    {
       *head_ref = new_node;
       return;
    }  
     
    /* 5. Else traverse till the last node */
    while (last->next != NULL)
        last = last->next;
 
    /* 6. Change the next of last node */
    last->next = new_node;
    return;    
}

void printList(struct node *node)
{
  while (node != NULL)
  {
     printf(" %d ", node->data);
     node = node->next;
  }
}


int main() 
{

struct node * start=NULL;
//struct node *head1,*head2,*head3;

//head1=(struct node *)malloc(sizeof(struct node));
append(&start,3);
append(&start,6);
//append(&start,9);
//append(&start,12);
//append(&start,15);
//append(&start,18);


deletealtnode(start);
printList(start);


	
	return 0;
}
